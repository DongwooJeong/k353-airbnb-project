load('C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.rdata')
load('C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.rdata')
load('C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.rdata')
# Incentive optimization
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/profit function share.R")
load('data processing project 2_with data_cleansing share.rdata')
# save
save(property_info_train, property_info_test, file = 'C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.rdata')
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/cross-validation.R")
sqrt(mean(cv_mse_vec_b))
sqrt(mean(cv_mse_vec_r))
sqrt(mean(cv_mse_vec_p))
cv_mse_vec_p
mean(cv_mse_vec_p)
mean(cv_mse_vec_r)
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/optimization.R")
checkmin = c(min(pred_bookingQ3),min(pred_blockedQ3),min(pred_priceQ3))
checkmin
pred_bookingQ3
pred_bookingQ3[pred_bookingQ3<0]
pred_blockedQ3[pred_blockedQ3<0]
is.na(pred_bookingQ3)
sum(is.na(pred_blockedQ3))
sum(is.na(pred_bookingQ3))
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/optimization.R")
incentive
mean(incentive)
View(listing_2016Q1)
listing_2016Q1$Month = format(as.Date(listing_2016Q1$Date), "%m")
listing_2016Q2$Month = format(as.Date(listing_2016Q2$Date), "%m")
#### newly generated monthly price
## PriceJan
listing_2016Jan_price = listing_2016Q1[listing_2016Q1$Month=="01"]
#### newly generated monthly price
## PriceJan
listing_2016Jan_price = listing_2016Q1[listing_2016Q1$Month=="01",]
agg_price_jan = aggregate(Price ~ PropertyID, data = listing_2016Jan_price, FUN = mean)
colnames(agg_price_jan)[2] = 'ListPriceJan'
property_info = merge(x = property_info, y = agg_price_jan, by = 'PropertyID', all.x = TRUE)
## PriceMar
listing_2016Mar_price = listing_2016Q1[listing_2016Q1$Month=="03",]
agg_price_mar = aggregate(Price ~ PropertyID, data = listing_2016Mar_price, FUN = mean)
colnames(agg_price_mar)[2] = 'ListPriceMar'
property_info = merge(x = property_info, y = agg_price_mar, by = 'PropertyID', all.x = TRUE)
## PriceApr
listing_2016Apr_price = listing_2016Q2[listing_2016Q2$Month=="04",]
agg_price_apr = aggregate(Price ~ PropertyID, data = listing_2016Apr_price, FUN = mean)
colnames(agg_price_Apr)[2] = 'ListPriceApr'
colnames(agg_price_apr)[2] = 'ListPriceApr'
property_info = merge(x = property_info, y = agg_price_apr, by = 'PropertyID', all.x = TRUE)
listing_2016Jan_price = listing_2016Q1[listing_2016Q1$Month=="01",]
agg_price_jan = aggregate(Price ~ PropertyID, data = listing_2016Jan_price, FUN = mean)
colnames(agg_price_jan)[2] = 'ListPriceJan'
property_info = merge(x = property_info, y = agg_price_jan, by = 'PropertyID', all.x = TRUE)
## PriceFeb
listing_2016Feb_price = listing_2016Q1[listing_2016Q1$Month=="02",]
agg_price_feb = aggregate(Price ~ PropertyID, data = listing_2016Feb_price, FUN = mean)
colnames(agg_price_feb)[2] = 'ListPriceFeb'
property_info = merge(x = property_info, y = agg_price_feb, by = 'PropertyID', all.x = TRUE)
## PriceMar
listing_2016Mar_price = listing_2016Q1[listing_2016Q1$Month=="03",]
agg_price_mar = aggregate(Price ~ PropertyID, data = listing_2016Mar_price, FUN = mean)
colnames(agg_price_mar)[2] = 'ListPriceMar'
property_info = merge(x = property_info, y = agg_price_mar, by = 'PropertyID', all.x = TRUE)
## PriceApr
listing_2016Apr_price = listing_2016Q2[listing_2016Q2$Month=="04",]
agg_price_apr = aggregate(Price ~ PropertyID, data = listing_2016Apr_price, FUN = mean)
colnames(agg_price_apr)[2] = 'ListPriceApr'
property_info = merge(x = property_info, y = agg_price_apr, by = 'PropertyID', all.x = TRUE)
## PriceMay
listing_2016May_price = listing_2016Q2[listing_2016Q2$Month=="05",]
agg_price_may = aggregate(Price ~ PropertyID, data = listing_2016May_price, FUN = mean)
colnames(agg_price_may)[2] = 'ListPriceMay'
property_info = merge(x = property_info, y = agg_price_may, by = 'PropertyID', all.x = TRUE)
## PriceJun
listing_2016Jun_price = listing_2016Q2[listing_2016Q2$Month=="06",]
agg_price_jun = aggregate(Price ~ PropertyID, data = listing_2016Jun_price, FUN = mean)
colnames(agg_price_jun)[2] = 'ListPriceJun'
property_info = merge(x = property_info, y = agg_price_jun, by = 'PropertyID', all.x = TRUE)
view(property_info)
View(property_info)
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/cross-validation.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/cross-validation.R")
print(sqrt(mean(cv_mse_vec_p)))
print(sqrt(mean(cv_mse_vec_r)))
print(sqrt(mean(cv_mse_vec_b)))
cv_mse_vec_b
for (idx in 1:n_round) {
lr_model = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred = predict(object = lr_model, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
lr_model = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred = predict(object = lr_model, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
print(sqrt(mean(cv_mse_vec_p)))
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/cross-validation.R")
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/optimization.R")
incentive
checkmin
checkmax
checksum
sum(is.na(incentive))
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
# Price
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
# Price
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
# Price
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
# Price
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
# Price
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceApr + ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
# Price
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
BookingApr + BlockedApr + BookingMay + BlockedMay + BookingJun + BlockedJun +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
# Price
n_round = 10
set.seed(0)
property_info_train$CVLabel = sample(x = 1:n_round, size = nrow(property_info_train), replace = TRUE)
cv_mse_vec_p = rep(NA, n_round)
for (idx in 1:n_round) {
lr_model_p = lm(formula = Price2016Q3 ~ Neighborhood + Superhost + NumberofReviews +
ResponseRate + Bedrooms + Bathrooms + PropertyType + PublishedMonthlyRate +
BookingJan + BlockedJan + BookingFeb + BlockedFeb + BookingMar + BlockedMar +
ListPriceJan + ListPriceFeb + ListPriceMar + ListPriceApr +ListPriceMay + ListPriceJun,
data = property_info_train[property_info_train$CVLabel != idx, ])
lr_pred_p = predict(object = lr_model_p, newdata = property_info_train[property_info_train$CVLabel==idx,])
cv_mse_vec_p[idx] = mean((lr_pred_p - property_info_train$Price2016Q3[property_info_train$CVLabel==idx])^2)
}
print(sqrt(mean(cv_mse_vec_p)))
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/cross-validation.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/JEONG/군필 정동우/학교/Kelley/Spring 2022/K353-Business Analytics and Modeling/Exercise/cv_Q3blocked_w_for_loop share.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/JEONG/군필 정동우/학교/Kelley/Spring 2022/K353-Business Analytics and Modeling/Exercise/data processing project 2_with data_cleansing share.R")
load("C:/Users/dongw/OneDrive - Indiana University/Desktop/JEONG/군필 정동우/학교/Kelley/Spring 2022/K353-Business Analytics and Modeling/Exercise/data processing project 2_with data_cleansing share.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/JEONG/군필 정동우/학교/Kelley/Spring 2022/K353-Business Analytics and Modeling/Exercise/cross_validation_Q3Price_share.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/JEONG/군필 정동우/학교/Kelley/Spring 2022/K353-Business Analytics and Modeling/Exercise/cv_Q3blocked_w_for_loop share.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/JEONG/군필 정동우/학교/Kelley/Spring 2022/K353-Business Analytics and Modeling/Exercise/cv_Q3blocked_w_for_loop share.R")
# 3. Print out the cross-validation MSE, which is the average of cv_mse_vec
print(sqrt(mean(cv_mse_vec)))
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/cross-validation.R")
load('C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/data-cleansing.rdata')
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/data-cleansing.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/cross-validation.R")
load('C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/data-cleansing.rdata')
pred_bookingQ3_3 = predict(object = reg_bookingQ3_428_2, newdata = property_info_test)
pred_blockedQ3_3 = predict(object = reg_blockedQ3_428_2, newdata = property_info_test)
pred_priceQ3_3 = predict(object = reg_priceQ3_428_2, newdata = property_info_test)
pred_bookingQ3 = pred_bookingQ3_3
pred_blockedQ3 = pred_blockedQ3_3
pred_priceQ3 = pred_priceQ3_3
# pred anomalies
pred_bookingQ3[is.na(pred_bookingQ3)]=0
pred_blockedQ3[is.na(pred_blockedQ3)]=0
pred_priceQ3[is.na(pred_priceQ3)]=0
pred_bookingQ3[pred_bookingQ3<0] = 0
pred_blockedQ3[pred_blockedQ3<0] = 0
pred_priceQ3[pred_priceQ3<0] = 0
pred_bookingQ3[pred_bookingQ3>92] = 92
pred_blockedQ3[pred_blockedQ3>92] = 92
pred_bookingQ3[pred_bookingQ3>92-pred_blockedQ3] = (92 - pred_blockedQ3)[pred_bookingQ3>92-pred_blockedQ3]
checkmin = c(min(pred_bookingQ3),min(pred_blockedQ3),min(pred_priceQ3))
checkmax = c(max(pred_bookingQ3),max(pred_blockedQ3))
checksum = max(pred_bookingQ3+pred_blockedQ3)
# Incentive optimization
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/profit function share.R")
incentive = rep(NA, nrow(property_info_test))
pb = txtProgressBar(style = 3)
for (i in 1:length(incentive)) {
setTxtProgressBar(pb = pb, value = i / length(incentive))
opt_obj_i = optim(par = 0, fn = profit_fun, lower = 0, upper = Inf, method = 'L-BFGS-B', control = list(fnscale = -1), blockedQ3 = pred_blockedQ3[i], bookedQ3 = pred_bookingQ3[i], priceQ3 = pred_priceQ3[i])
incentive[i] = opt_obj_i$par
}
close(pb)
save(incentive, file = 'C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/Airbob.rdata')
pred_bookingQ3 = pred_bookingQ3_3
pred_blockedQ3 = pred_blockedQ3_3
pred_priceQ3 = pred_priceQ3_3
# pred anomalies
pred_bookingQ3[is.na(pred_bookingQ3)]=0
pred_blockedQ3[is.na(pred_blockedQ3)]=0
pred_priceQ3[is.na(pred_priceQ3)]=0
pred_bookingQ3[pred_bookingQ3<0] = 0
pred_blockedQ3[pred_blockedQ3<0] = 0
pred_priceQ3[pred_priceQ3<0] = 0
pred_bookingQ3[pred_bookingQ3>92] = 92
pred_blockedQ3[pred_blockedQ3>92] = 92
pred_bookingQ3[pred_bookingQ3>92-pred_blockedQ3] = (92 - pred_blockedQ3)[pred_bookingQ3>92-pred_blockedQ3]
checkmin = c(min(pred_bookingQ3),min(pred_blockedQ3),min(pred_priceQ3))
checkmax = c(max(pred_bookingQ3),max(pred_blockedQ3))
checksum = max(pred_bookingQ3+pred_blockedQ3)
# Incentive optimization
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/profit function share.R")
incentive = rep(NA, nrow(property_info_test))
pb = txtProgressBar(style = 3)
for (i in 1:length(incentive)) {
setTxtProgressBar(pb = pb, value = i / length(incentive))
opt_obj_i = optim(par = 0, fn = profit_fun, lower = 0, upper = Inf, method = 'L-BFGS-B', control = list(fnscale = -1), blockedQ3 = pred_blockedQ3[i], bookedQ3 = pred_bookingQ3[i], priceQ3 = pred_priceQ3[i])
incentive[i] = opt_obj_i$par
}
close(pb)
save(incentive, file = 'C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/Airbob.rdata')
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/data-cleansing.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/optimization.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/data-cleansing.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/cross-validation.R")
source("C:/Users/dongw/OneDrive - Indiana University/Desktop/K353-project2/k353-airbnb-project/optimization.R")
checkmin
checkmax
checksum
sum(is.na(pred_blockedQ3))
sum(is.na(pred_bookingQ3))
sum(is.na(pred_priceQ3))
sum(is.na(incentive))
incentive
